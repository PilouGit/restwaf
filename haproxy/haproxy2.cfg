global
    log stdout format raw daemon
    log stdout local0 debug

defaults
    log global
    mode http
    option httplog
    timeout connect 5000ms
    timeout client  50000ms
    timeout server  50000ms
    option logasap

frontend localnodes
    bind *:8080
    #bind *:443 ssl crt /path/to/your/cert.pem
    mode http
    log global
    option httplog
    acl is_https ssl_fc
    unique-id-format %[uuid()]
    unique-id-header X-Unique-ID
    http-request set-header X-Scheme http if !is_https
    http-request set-header X-Scheme https if is_https

    # Ajouter X-Original-URL avec le schéma capturé
    http-request set-header X-Original-URL %[req.hdr(X-Scheme)]://%[req.hdr(Host)]%[path]

    # Capturer l'en-tête X-Original-URL pour vérification
    http-request capture req.hdr(X-Original-URL) len 128

    # Utiliser le SPOE pour envoyer l'URL absolue au SPOA
    filter spoe engine spoe config spoe.conf

    log-format "%ci:%cp [%t] %ft %b/%s %Tq/%Tw/%Tc/%Tr/%Tt %ST %B %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %{+Q}r X-Original-URL:%[capture.req.hdr(0)]"
    log-format "${HAPROXY_HTTP_LOG_FMT} hdrs:%{+Q}[var(req.spoe)]"
     log-format "${HAPROXY_HTTP_LOG_FMT} hdrs:%{+Q}[var(res.spoe)]"
      log-format "${HAPROXY_HTTP_LOG_FMT} hdrs:%{+Q}[var(sess.spoe)]"
       log-format "${HAPROXY_HTTP_LOG_FMT} ruleid %{+Q}[var(txn.spoe.ruleid)] action %{+Q}[var(txn.spoe.action)]"
       #  log-format "${HAPROXY_HTTP_LOG_FMT} hdrs:%{+Q}[var(txn.spoe.action)]"
http-request deny deny_status 403 hdr waf-block "request"  if { var(txn.spoe.action) -m str deny }
    http-response deny deny_status 403 hdr waf-block %[var(txn.spoe.ruleid)] if { var(txn.spoe.action) -m str deny }

    default_backend nodes_backend

backend nodes_backend
    mode http
    server node1 127.0.0.1:8282
    #server node2 192.168.1.20:80

backend spoe_backend
    log global
    mode tcp
    server spoe_server 127.0.0.1:3000
